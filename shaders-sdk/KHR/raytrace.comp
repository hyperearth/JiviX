#version 460 core // #
#extension GL_GOOGLE_include_directive : require
//#extension GL_EXT_ray_tracing          : require
#extension GL_EXT_ray_query            : require
//#extension GL_ARB_post_depth_coverage  : require
#include "./driver.glsl"


// 
layout (local_size_x = 16u, local_size_y = 12u) in; 

// BUT DEFAULT OVERRIDEN!
ivec2 launchSize = ivec2(1600, 1200);

// 
struct XHIT {
    vec4  diffuseColor;
    vec4 emissionColor;
    vec4  normalsColor;
    vec4 specularColor;

    vec4 geoNormal;
    vec4 mapNormal;
    vec4 origin;

    vec4 gTangent;
    vec4 gBinormal;
};

// 
XHIT traceRays(in vec3 origin, in vec3 raydir, in vec3 normal, float maxT) {
    XHIT result; uint32_t I = 0, R = 0; float lastMax = maxT, lastMin = 0.001f; vec3 lastOrigin = origin;
    result. diffuseColor = vec4(1.f.xxxx);
    result.emissionColor = vec4(gSkyColor,0.f.x);
    result. normalsColor = vec4(0.5f,0.5f,1.f,1.f);
    result.specularColor = vec4(0.f.xxx,0.f.x); // TODO: Correct Specular Initial
    result.geoNormal = vec4(vec3(0.f,1.f,0.f),lastMax);
    result.mapNormal = vec4(vec3(0.f,1.f,0.f),1.f);
    //result.tangent = vec4(vec3(0.f,0.f,1.f),lastMin); // UNUSED

    float fullLength = 0.f;
    vec3 forigin = lastOrigin; // REQUIRED!
    bool restart = false;

    // 
    XHIT processing = result;
    while((R++) < 4) { // restart needs for transparency (after every resolve)
        rayQueryEXT rayQuery;
        rayQueryInitializeEXT(rayQuery, Scene, gl_RayFlagsOpaqueEXT|gl_RayFlagsCullNoOpaqueEXT,
            0xFF, (forigin = lastOrigin) + faceforward(normal.xyz,raydir.xyz,-normal.xyz) * 0.001f + raydir.xyz * 0.001f, lastMin, raydir, lastMax = (maxT - fullLength));

        while((I++) < 2) {
            bool complete = !rayQueryProceedEXT(rayQuery);

            // Full Instance ID of Node (BY GEOMETRY INSTATNCE!!)
            uint primitiveID = -1, nodeMeshID = -1, geometryInstanceID = -1, globalInstanceID = -1;
            vec2 baryCoord = vec2(0.f,0.f);
            float tHit = lastMax;

            // 
            if (complete) {
                nodeMeshID = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true); // Mesh ID from Node Mesh List (because indexing)
                geometryInstanceID = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, true); // TODO: Using In Ray Tracing (and Query) shaders!
                globalInstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, true);
                baryCoord = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
                primitiveID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true); 
                origin = rayQueryGetIntersectionObjectRayOriginEXT(rayQuery, true);
                tHit = rayQueryGetIntersectionTEXT(rayQuery, true);
            } else {
                nodeMeshID = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false); // Mesh ID from Node Mesh List (because indexing)
                geometryInstanceID = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, false); // TODO: Using In Ray Tracing (and Query) shaders!
                globalInstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, false);
                baryCoord = rayQueryGetIntersectionBarycentricsEXT(rayQuery, false);
                primitiveID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false); 
                origin = rayQueryGetIntersectionObjectRayOriginEXT(rayQuery, false);
                tHit = rayQueryGetIntersectionTEXT(rayQuery, false);
            };

            // TODO: ???
            //origin += raydir*tHit;

            // 
            if (tHit < lastMax) { lastOrigin = origin, lastMax = tHit; // Choice Only MINIMAL
                const int IdxType = int(meshInfo[nodeMeshID].indexType)-1;
                uvec3 idx3 = uvec3(primitiveID*3u+0u,primitiveID*3u+1u,primitiveID*3u+2u);
                if (IdxType == IndexU8 ) { idx3 = uvec3(load_u8 (idx3.x*1u, 8u, nodeMeshID),load_u32(idx3.y*1u, 8u, nodeMeshID),load_u32(idx3.z*1u, 8u, nodeMeshID)); };
                if (IdxType == IndexU16) { idx3 = uvec3(load_u16(idx3.x*2u, 8u, nodeMeshID),load_u16(idx3.y*2u, 8u, nodeMeshID),load_u16(idx3.z*2u, 8u, nodeMeshID)); };
                if (IdxType == IndexU32) { idx3 = uvec3(load_u32(idx3.x*4u, 8u, nodeMeshID),load_u32(idx3.y*4u, 8u, nodeMeshID),load_u32(idx3.z*4u, 8u, nodeMeshID)); };

                // Interpolate In Ray-Tracing 
                const vec4 gTexcoord = vec4(triangulate(idx3, 1u, nodeMeshID,vec3(1.f-baryCoord.x-baryCoord.y,baryCoord)).xyz,0.f);
                const vec4 gNormal = vec4(triangulate(idx3, 2u, nodeMeshID,vec3(1.f-baryCoord.x-baryCoord.y,baryCoord)).xyz,0.f);
                const vec4 gTangent = vec4(triangulate(idx3, 3u, nodeMeshID,vec3(1.f-baryCoord.x-baryCoord.y,baryCoord)).xyz,0.f);
                const vec4 gBinormal = vec4(triangulate(idx3, 4u, nodeMeshID,vec3(1.f-baryCoord.x-baryCoord.y,baryCoord)).xyz,0.f);

                // By Geometry Data
                mat3x4 matras = mat3x4(instances[nodeMeshID].transform[geometryInstanceID]);
                if (!hasTransform(meshInfo[nodeMeshID])) {
                    matras = mat3x4(vec4(1.f,0.f.xxx),vec4(0.f,1.f,0.f.xx),vec4(0.f.xx,1.f,0.f));
                };

                // By Instance Data
                const mat3x4 matra4 = rtxInstances[globalInstanceID].transform;

                // Native Normal Transform
                const mat3x3 normalTransform = inverse(transpose(regen3(matras)));
                const mat3x3 normInTransform = inverse(transpose(regen3(matra4)));

                // 
                const MaterialUnit unit = materials[0u].data[meshInfo[nodeMeshID].materialID];
                const vec4 diffuseColor = toLinear(unit. diffuseTexture >= 0 ? texture(textures[nonuniformEXT(unit. diffuseTexture)],gTexcoord.xy) : unit.diffuse);
                if (diffuseColor.w > 0.001f) { // Only When Opaque!
                    //lastOrigin = origin, lastMax = tHit;

                    // 
                    processing. diffuseColor = diffuseColor;//toLinear(unit. diffuseTexture >= 0 ? texture(textures[nonuniformEXT(unit. diffuseTexture)],gTexcoord.xy) : unit.diffuse);
                    processing.emissionColor = toLinear(unit.emissionTexture >= 0 ? texture(textures[nonuniformEXT(unit.emissionTexture)],gTexcoord.xy) : unit.emission);
                    processing. normalsColor = unit. normalsTexture >= 0 ? texture(textures[nonuniformEXT(unit. normalsTexture)],gTexcoord.xy) : unit.normals;
                    processing.specularColor = unit.specularTexture >= 0 ? texture(textures[nonuniformEXT(unit.specularTexture)],gTexcoord.xy) : unit.specular;

                    // 
                    processing.geoNormal = normalize(gNormal);
                    processing.gBinormal = normalize(gBinormal);
                    processing.gTangent  = normalize(gTangent);

                    // FIX NORMAL ISSUE (04.04.2020)
                    processing.geoNormal.xyz = normalize(processing.geoNormal.xyz * normalTransform * normInTransform);
                    processing.gBinormal.xyz = normalize(processing.gBinormal.xyz * normalTransform * normInTransform);
                    processing.gTangent .xyz = normalize(processing.gTangent .xyz * normalTransform * normInTransform);

                    // Mapping
                    processing.geoNormal.xyz = normalize(faceforward(processing.geoNormal.xyz, raydir.xyz, processing.geoNormal.xyz));
                    processing.mapNormal = vec4(normalize(mat3x3(processing.gTangent.xyz, processing.gBinormal.xyz, processing.geoNormal.xyz) * normalize(processing.normalsColor.xyz * 2.f - 1.f)), 1.f);
                    processing.geoNormal.w = fullLength + lastMax;

                    // Normalize
                    processing.geoNormal.xyz = normalize(processing.geoNormal.xyz);
                    processing.gTangent.xyz = normalize(processing.gTangent.xyz);
                    processing.gBinormal.xyz = normalize(processing.gBinormal.xyz);

                    // Fix light leaks
                    processing.mapNormal.xyz = normalize(faceforward(processing.mapNormal.xyz, raydir.xyz, processing.geoNormal.xyz));

                    // Use real origin
                    processing.origin = vec4(lastOrigin, 1.f);
                    //processing.tangent = gTangent; // UNUSED

                    if (!complete) { rayQueryConfirmIntersectionEXT(rayQuery); };
                } else { // It's transparent, need ray-trace again! (but with another position)
                    if (complete) { restart = true; };
                };
            };

            if (complete) { break; };
        };
        
        // 
        //rayQueryConfirmIntersectionEXT(rayQuery);
        rayQueryTerminateEXT(rayQuery);

        // 
        if (!restart || (fullLength += lastMax) >= (maxT-0.1f)) { break; } else { restart = false; }; // With Correction* 
    };

    // 
    return processing;///(fullLength >= (maxT-1.f)) ? result : processing;
};

// 
void directLight(in vec4 sphere, in vec3 origin, in vec3 normal, inout uvec2 seed, inout vec4 gSignal, inout vec4 gEnergy){
    const vec3 lightp = sphere.xyz + randomSphere(seed) * sphere.w; float shdist = distance(lightp.xyz,origin.xyz);
    const vec3 lightd = normalize(lightp.xyz - origin.xyz);
    const vec3 lightc = 1024.f.xxx;

    if ( dot(normal, lightd) >= 0.f ) {
        float sdepth = raySphereIntersect(origin.xyz,lightd,sphere.xyz,sphere.w);
        XHIT result = traceRays(origin, lightd, normal, sdepth = sdepth <= 0.f ? 10000.f : sdepth);

        if ( min(sdepth, result.geoNormal.w) >= sdepth ) { // If intersects with light
            const float cos_a_max = sqrt(1.f - clamp(sphere.w * sphere.w / dot(sphere.xyz-origin.xyz, sphere.xyz-origin.xyz), 0.f, 1.f));
            gSignal += vec4(gEnergy.xyz * 2.f * (1.f - cos_a_max) * clamp(dot( lightd, normal.xyz ), 0.f, 1.f) * lightc, 0.f);
        };
    };
};

// 
void main() {
    uvec2 lanQ = gl_GlobalInvocationID.xy;
    launchSize = imageSize(writeImages,0);

    // 
    const ivec2 curPixel = ivec2(lanQ), invPixel = ivec2(curPixel.x,launchSize.y-curPixel.y-1u);
    const ivec2 sizPixel = ivec2(launchSize);
    const uint packed = pack32(u16vec2(curPixel));

    // 
    const Box box = { -1.f.xxx, 1.f.xxx }; // TODO: Change Coordinate
    const vec4 sphere = vec4(vec3(16.f,128.f,16.f), 8.f);
    const vec3 lightc = 32.f*4096.f.xxx/(sphere.w*sphere.w);

    //const vec2 shift = random2(uvec2(rdata[0],packed)), pixel = (vec2(invPixel)+0.5f)+(shift*2.f-1.f)*0.5f;
    const vec2 shift = 0.5f.xx, pixel = (vec2(invPixel)+0.5f)+(shift*2.f-1.f)*0.5f
    const vec3 cameraSample = vec4(worldsSample.xyz,1.f)*modelview;
    uvec2 seed = uvec2(packed,rdata.x);

    // 
     vec3 origin = screen2world(vec3((vec2(pixel)/vec2(sizPixel))*2.f-1.f,0.001f));
     vec3 target = screen2world(vec3((vec2(pixel)/vec2(sizPixel))*2.f-1.f,0.999f));
     vec3 raydir = normalize(target - origin);
     vec3 normal = vec3(0.f);
     vec3 geonrm = vec3(0.f);

    // Replacement for rasterization
    XHIT result = traceRays(origin, raydir, normal, 10000.f);
    mat3 TBN    = mat3(result.gTangent.xyz, result.gBinormal.xyz, result.geoNormal.xyz);

    // 
    imageStore(writeImages[DIFFUSED], pixel, vec4(0.f.xxx, 1.f));
    imageStore(writeImages[COLORING], pixel, vec4(max(result.diffuseColor.xyz - result.emissionColor.xyz, 0.f.xxx), 1.f)); // TODO: REPLACE IT BY TEXCOORD, Material ID
    imageStore(writeImages[EMISSION], pixel, vec4(result.emissionColor.xyz, 1.f));
    imageStore(writeImages[REFLECTP], pixel, vec4(0.f.xxx, 1.f)); // Py-Clone
    imageStore(writeImages[REFLECLR], pixel, vec4(0.f.xxx, 1.f));
    imageStore(writeImages[POSITION], pixel, vec4(result.origin.xyz, 1.f));

    // TODO: Save Texcoord, Material ID buffer
    // .. .. ..

    // 
    if (result.diffuseColor.w > 0.001f) {
        const vec3 cameraSample = vec4(fPosition.xyz,1.f)*modelview;
        vec3 forigin = origin, fraydir = raydir, fnormal = result.mapNormal.xyz;
        TBN[2] = normalize(faceforward(TBN[2], fraydir.xyz, TBN[2]));

        const vec4 sphere = vec4(vec3(16.f,128.f,16.f), 8.f);
        const uint packed = pack32(u16vec2(gl_FragCoord.xy));

        const vec4 bspher = vec4(forigin,10000.f);
        const float inIOR = 1.f, outIOR = 1.6666f;

        uvec2 seed = uvec2(packed,rdata.x);
        for (uint I=0;I<2;I++) {
            vec3 raydir = I == 0 ? randomHemisphereCosine(seed, TBN) : reflectGlossy(seed, fraydir.xyz, TBN, specularColor.y);
            vec3 origin = forigin, normal = normalize(faceforward(fnormal.xyz, fraydir.xyz, TBN[2]));
            raydir.xyz = normalize(faceforward(raydir.xyz, raydir.xyz, -TBN[2]));

            vec4 gEnergy = vec4(1.f.xxxx), gSignal = vec4(0.f.xxx,1.f);
            if ( I == 0 ) { directLight(sphere, origin, normal, seed, gSignal, gEnergy); };

            for (uint i=0;i<3;i++) { // 
                XHIT result = traceRays(origin, raydir, normal, 10000.f);

                // 
                float sdepth = raySphereIntersect(origin.xyz,raydir.xyz,sphere.xyz,sphere.w); sdepth = sdepth <= 0.f ? 10000.f : sdepth;
                float mvalue = min(result.geoNormal.w, 10000.f);

                // power of reflection
                float reflectionPower = mix(clamp(pow(1.0f + dot(raydir.xyz, result.mapNormal.xyz), outIOR/inIOR), 0.f, 1.f) * 0.3333f, 1.f, result.specularColor.z);
                bool couldReflection = random(seed) <= reflectionPower;

                // 
                if ( result.geoNormal.w >= 9999.f ) {
                    const float sdepth = raySphereIntersect(origin.xyz,raydir.xyz,bspher.xyz,bspher.w); mvalue = (sdepth <= 0.f ? 10000.f : sdepth);
                    BACKSKY_COLOR;
                } else 
                if ( result.diffuseColor.w > 0.001f ) {
                    if (couldReflection) {
                        gEnergy *= vec4(mix(1.f.xxx, result.diffuseColor.xyz, result.specularColor.zzz), 1.f);
                    } else {
                        gSignal.xyz += gEnergy.xyz * result.emissionColor.xyz * result.emissionColor.w;
                        gEnergy *= vec4(max(result.diffuseColor.xyz - clamp(result.emissionColor.xyz*result.emissionColor.w,0.f.xxx,1.f.xxx), 0.f.xxx), 1.f);
                    };
                } else { // VOID!
                    gEnergy *= vec4(0.f.xxxx);
                }

                // 
                const mat3x3 TBN = mat3x3(result.gTangent.xyz,result.gBinormal.xyz,result.mapNormal.xyz);
                raydir.xyz = couldReflection ? 
                    reflectGlossy(seed, raydir.xyz, TBN, result.specularColor.y) : 
                    randomHemisphereCosine(seed, TBN);

                // 
                raydir.xyz = normalize(faceforward(raydir.xyz, raydir.xyz, -result.geoNormal.xyz));

                // 
                normal.xyz = result.mapNormal.xyz = normalize(faceforward(result.mapNormal.xyz, -raydir.xyz, result.geoNormal.xyz));

                // 
                origin.xyz = result.origin.xyz;
                origin.xyz += faceforward(result.geoNormal.xyz,-raydir.xyz,result.geoNormal.xyz) * 0.0001f + raydir.xyz * 0.0001f;
                if ((dot(gEnergy.xyz,1.f.xxx)/3.f) <= 0.001f || result.geoNormal.w >= 9999.f || dot(raydir.xyz,result.geoNormal.xyz) <= 0.f) { break; }; //

                // 
                directLight(sphere, origin, normal, seed, gSignal, gEnergy);
            };

            // 
            if (I == 0) { imageStore(writeImages[DIFFUSED], pixel, vec4(gSignal.xyz, 1.f)); };
            if (I == 1) { imageStore(writeImages[REFLECLR], pixel, vec4(gSignal.xyz, 1.f)); };
        };
    };

};
