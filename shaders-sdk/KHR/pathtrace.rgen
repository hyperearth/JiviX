#version 460 core // #
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing          : require
#include "./driver.glsl"


#define ENABLE_RASTERIZE_STAGE
layout ( binding = 2, set = 1 ) uniform accelerationStructureEXT Scene;
layout ( location = 0 ) rayPayloadEXT RayPayloadData PrimaryRay;
#define ShadowsRay PrimaryRay // re-direct
//layout ( location = 1 ) rayPayloadEXT RayPayloadData ShadowsRay;

uvec2 launchSize = uvec2(0u);

vec4 shiftByPixel(in vec4 wpos, inout uvec2 seed){
    vec2 sizpx = vec2(launchSize);
    vec2 shift = random2(seed);
    vec4 sspos = vec4(vec4(divW(wpos * projectionInv),1.f) * modelviewInv, 1.f);
    sspos.xy += shift/sizpx;
    return vec4(divW(vec4(sspos * modelview, 1.f) * projection), 1.f);
};

// 
vec4 getIndirect(in ivec2 map){
    const ivec2 size = imageSize(writeImages[DIFFUSED]);
    //vec4 samples = imageLoad(writeImages[DIFFUSED],ivec2(map.x,size.y-map.y-1)); samples = max(samples, 0.001f); samples.xyz /= samples.w;
    //return samples;
    //return imageLoad(writeImages[DIFFUSED],ivec2(map.x,size.y-map.y-1));
    return texelFetch(frameBuffers[RAYQUERY],ivec2(map.x,size.y-map.y-1),0);
};


// TODO: Hybrid Path Tracing
void main() { // Hi-DPI adaptation
    uvec2 lanQ = gl_LaunchIDEXT.xy;
    launchSize = gl_LaunchSizeEXT.xy;

    { // Store for Diffuse
        const vec4 directSample = getIndirect(ivec2(lanQ));
        const vec4 locateSample = 0.f.xxxx;//imageLoad(writeImages[SAMPLING], ivec2(lanQ));
        const vec4 speculSample = 0.f.xxxx;//imageLoad(writeImages[REFLECTS], ivec2(lanQ));
        imageStore(writeImages[DIFFUSED], ivec2(lanQ), directSample);
        imageStore(writeImages[REFLECTS], ivec2(lanQ), speculSample);
    };

    subgroupBarrier();

/*
    ShadowsRay.position  = PrimaryRay.position  = vec4(0.f);
    ShadowsRay.normals   = PrimaryRay.normals   = vec4(0.f);
    ShadowsRay.fdata.xyz = PrimaryRay.fdata.xyz = vec3(0.f,0.f,10000.f); //gl_HitTEXT
    ShadowsRay.udata.xyz = PrimaryRay.udata.xyz = uvec3(0u);

    uvec2 lanQ = gl_LaunchIDEXT.xy;
    launchSize = gl_LaunchSizeEXT.xy;

    // 
    //uvec2 lanQ = uvec2(gl_LaunchIDEXT.x,(gl_LaunchIDEXT.y<<1u) | ((gl_LaunchIDEXT.x&1u)^(rdata.x&1u)));
    //launchSize = uvec2(gl_LaunchSizeEXT.x,gl_LaunchSizeEXT.y<<1u);

    // 
    const ivec2 curPixel = ivec2(lanQ), invPixel = ivec2(curPixel.x,launchSize.y-curPixel.y-1u);
    const ivec2 sizPixel = ivec2(launchSize);
    const uint packed = pack32(u16vec2(curPixel));

    // 
    const Box box = { -1.f.xxx, 1.f.xxx }; // TODO: Change Coordinate
    const vec4 sphere = vec4(vec3(16.f,128.f,16.f), 8.f);
    const vec3 lightc = 32.f*4096.f.xxx/(sphere.w*sphere.w);

    //const vec2 shift = random2(uvec2(rdata[0],packed)), pixel = (vec2(invPixel)+0.5f)+(shift*2.f-1.f)*0.5f;
    const vec2 shift = 0.5f.xx, pixel = (vec2(invPixel)+0.5f)+(shift*2.f-1.f)*0.5f;
    const vec4 colourSample = texture(frameBuffers[COLORING], pixel);
    const vec4 normalSample = texture(frameBuffers[NORMALED], pixel);
    const vec4 worldsSample = texture(frameBuffers[SAMPLEPT], pixel);
    const vec4 emitedSample = texture(frameBuffers[EMISSION], pixel);
    const vec4 speculSample = texture(frameBuffers[SPECULAR], pixel);
    const vec4 geompsSample = texture(frameBuffers[POSITION], pixel);
    const vec3 cameraSample = vec4(worldsSample.xyz,1.f)*modelview;
    uvec2 seed = uvec2(packed,rdata.x);

    const int ITERATION_COUNT = 2;
    const int TRANSPARENT_COUNT = 2;

    [[unroll]] for (uint32_t I=0;I<2;I++) { // Path Traced Diffuse Global Illumination
        int TRANSPARENT_ITERATION = TRANSPARENT_COUNT;

#ifdef ENABLE_RASTERIZE_STAGE
        vec3 raydir  = (modelview * normalize(cameraSample.xyz)).xyz;
        vec3 origin  = worldsSample.xyz;
        vec3 normal = normalSample.xyz;
        vec3 geonrm = texture(frameBuffers[GEONORML], pixel).xyz;
#else
        vec3 origin = screen2world(vec3((vec2(pixel)/vec2(sizPixel))*2.f-1.f,0.001f));
        vec3 target = screen2world(vec3((vec2(pixel)/vec2(sizPixel))*2.f-1.f,0.999f));
        vec3 raydir = normalize(target - origin);
        vec3 normal = vec3(0.f);
        vec3 geonrm = vec3(0.f);
#endif
        // 
        const vec4 bspher = vec4(origin, 10000.f);
        const float inIOR = 1.f, outIOR = 1.6666f;

        vec3 forign = geompsSample.xyz;//origin.xyz;
        vec3 fnorml = geonrm.xyz;//normal.xyz;
        float frefl = mix(clamp(pow(1.0f + dot(raydir.xyz, normal.xyz), outIOR/inIOR), 0.f, 1.f) * 0.3333f, 1.f,speculSample.z);

        // 
#ifdef ENABLE_RASTERIZE_STAGE
        vec4 gmNormal = texture(frameBuffers[GEONORML], pixel);
        vec4 gTangent = texture(frameBuffers[TANGENTS], pixel);
#else
        vec4 gmNormal = 0.f.xxxx, gTangent = 0.f.xxxx;
#endif

        // 
        vec4 gNormal = vec4(normal,0.f);
        vec4 gBinorml = vec4(normalize(cross(gNormal.xyz,gTangent.xyz)), 1.f);//PrimaryRay.binorml;

        // 
        vec4 gSignal = vec4(0.f.xxx,1.f);
        vec3 gEnergy = I == 0 ? 1.f.xxx : mix(1.f.xxx, colourSample.xyz + emitedSample.xyz, speculSample.z);
        vec2 gTexcoord = 0.f.xx;
        const mat3x3 TBN = mat3x3(gTangent.xyz,gBinorml.xyz,gNormal.xyz);

        // 
         gNormal.xyz = normalize(faceforward( gNormal.xyz, raydir.xyz,  gNormal.xyz));
        gmNormal.xyz = normalize(faceforward(gmNormal.xyz, raydir.xyz, gmNormal.xyz));

        int i = 0; 
#ifdef ENABLE_RASTERIZE_STAGE // complete first stage
        raydir.xyz = I == 0 ? randomHemisphereCosine(seed, TBN) : reflectGlossy(seed, raydir.xyz, TBN, speculSample.y);
        origin.xyz += faceforward(gNormal.xyz,-raydir.xyz, gNormal.xyz) * 0.001f, i++; // pre-correction
        origin.xyz += raydir.xyz * 0.001f;
#endif

        bool afterReflection = false;
        if (!all(fequal(worldsSample.xyz,0.f.xxx)) && (I == 0u || frefl >= 0.001f)) 
        for (;i <= ITERATION_COUNT; i++) { //

            // Shadows Rays
            if (i >= (I == 0 ? 1u : 2u)) {
                vec3 lorign = origin;
                const vec3 lightp = sphere.xyz + randomSphere(seed) * sphere.w; float shdist = distance(lightp.xyz,lorign.xyz);
                const vec3 lightd = normalize(lightp.xyz - lorign.xyz);

                float depth = 0.f;
                if (dot(lightd.xyz, gmNormal.xyz) >= 0.f) {
                    float sdepth = raySphereIntersect(origin.xyz,lightd,sphere.xyz,sphere.w); sdepth = sdepth <= 0.f ? 10000.f : sdepth;
                    for (uint j=0;j<TRANSPARENT_COUNT;j++) {
                        traceRayEXT(Scene, gl_RayFlagsOpaqueEXT, 0xFF,
                            0, 1, 0,
                            lorign.xyz, 0.0001f,
                            lightd.xyz, 10000.f,
                            0);
                        
                        depth = min(sdepth,depth+ShadowsRay.fdata.z); // Generalize Shadow Depth
                        lorign.xyz += lightd.xyz * ShadowsRay.fdata.z;

                        const MaterialUnit unit = materials[0u].data[meshInfo[ShadowsRay.udata.w].materialID];
                        const vec4  diffuseColor = toLinear(unit. diffuseTexture >= 0 ? texture(textures[nonuniformEXT(unit. diffuseTexture)],PrimaryRay.texcoord.xy) : unit.diffuse);
                        if (diffuseColor.w > 0.001f || depth >= (shdist-0.0001f)) { break; };
                        lorign.xyz += faceforward(gmNormal.xyz,-lightd.xyz,gmNormal.xyz) * 0.0001f + lightd.xyz * 0.0001f;
                    };
                };

                const float cos_a_max = sqrt(1.f - clamp(sphere.w * sphere.w / dot(sphere.xyz-origin.xyz, sphere.xyz-origin.xyz), 0.f, 1.f));
                if (depth >= shdist-0.0001f) { gSignal += vec4(gEnergy * 2.f * (1.f - cos_a_max) * clamp(dot( lightd, gNormal.xyz ), 0.f, 1.f) * lightc, 0.f); };
            };

            // Primary Rays
            traceRayEXT(Scene, gl_RayFlagsOpaqueEXT, 0xFF,
                0, 1, 0,
                origin.xyz, 0.0001f,
                raydir.xyz, 10000.f,
                0);
            
            gTangent = PrimaryRay.tangent;
            gmNormal = PrimaryRay.normals; gmNormal.xyz = normalize(faceforward(gmNormal.xyz, raydir.xyz, gmNormal.xyz));
            gBinorml = PrimaryRay.binorml;
            //gNormal  = PrimaryRay.normalm;

            // 
            const MaterialUnit unit = materials[0u].data[meshInfo[ShadowsRay.udata.w].materialID];
            const vec4  diffuseColor = toLinear(unit. diffuseTexture >= 0 ? texture(textures[nonuniformEXT(unit. diffuseTexture)],PrimaryRay.texcoord.xy) : unit.diffuse);
            const vec4  normalsColor = unit. normalsTexture >= 0 ? texture(textures[nonuniformEXT(unit. normalsTexture)],PrimaryRay.texcoord.xy) : unit.normals;
            const vec4 emissionColor = toLinear(unit.emissionTexture >= 0 ? texture(textures[nonuniformEXT(unit.emissionTexture)],PrimaryRay.texcoord.xy) : unit.emission);
            const vec4 specularColor = unit.specularTexture >= 0 ? texture(textures[nonuniformEXT(unit.specularTexture)],PrimaryRay.texcoord.xy) : unit.specular;

            // compute transmuted normal 
            gNormal.xyz = normalize(mat3x3(gTangent.xyz,gBinorml.xyz,gmNormal.xyz) * (normalsColor.xyz * 2.f - 1.f));
            gNormal.xyz = normalize(faceforward(gNormal.xyz, raydir.xyz, gNormal.xyz));

            // 
            float sdepth = raySphereIntersect(origin.xyz,raydir.xyz,sphere.xyz,sphere.w); sdepth = sdepth <= 0.f ? 10000.f : sdepth;
            float pdepth = planeIntersect(origin.xyz,raydir.xyz,vec3(0.f,-5.f,0.f),vec3(0.f,1.f,0.f)); pdepth = pdepth <= 0.f ? 10000.f : pdepth;
            float  depth = afterReflection && I == 0u ? min(PrimaryRay.fdata.z,sdepth) : PrimaryRay.fdata.z;

            // power of reflection
            float reflectionPower = mix(clamp(pow(1.0f + dot(raydir.xyz, gNormal.xyz), outIOR/inIOR), 0.f, 1.f) * 0.3333f, 1.f, specularColor.z);
            bool couldReflection = random(seed) <= reflectionPower;

            // TODO: better depth system
            [[flatten]] if (depth >= 9999.f) { 
                const float sdepth = raySphereIntersect(origin.xyz,raydir.xyz,bspher.xyz,bspher.w); depth = (sdepth <= 0.f ? 10000.f : sdepth);
                BACKSKY_COLOR;
            } else
            [[flatten]] if (depth == PrimaryRay.fdata.z) { if (diffuseColor.w > 0.001f) {
                //gEnergy.xyz *= vec3(0.5f,0.5f,1.f);
                if (couldReflection) {
                    gEnergy *= mix(1.f.xxx,diffuseColor.xyz,specularColor.zzz);
                } else {
                    gSignal.xyz += i > 0 ? gEnergy.xyz * emissionColor.xyz * emissionColor.w : 0.f.xxx;
                    gEnergy *= max(i > 0 ? max(diffuseColor.xyz - clamp(emissionColor.xyz*emissionColor.w,0.f.xxx,1.f.xxx), 0.f.xxx) : 1.f.xxx, 0.f.xxx);
                };
            }} else 
            [[flatten]] if (depth == sdepth) { // Light Sphere
                if (afterReflection) { gSignal.xyz += clamp(lightc*gEnergy.xyz,0.f.xxx,64.f.xxx), gEnergy *= 0.f.xxx; }; // TODO: Denoised Caustics Support
                gmNormal.xyz = gNormal.xyz = normalize((origin.xyz + raydir.xyz * sdepth) - sphere.xyz);
            } else 
            {
                const float sdepth = raySphereIntersect(origin.xyz,raydir.xyz,bspher.xyz,bspher.w); depth = (sdepth <= 0.f ? 10000.f : sdepth);
                BACKSKY_COLOR;
            };

            // 
            origin.xyz += raydir.xyz * depth;
            if (i == 0u) { forign = origin.xyz, fnorml = gmNormal.xyz, frefl = reflectionPower; };

            // 
            if (couldReflection) afterReflection = true;

            // 
            gmNormal.xyz = normalize(faceforward(gmNormal.xyz,raydir.xyz,gmNormal.xyz)); // interverse into incoming ray
             gNormal.xyz = normalize(faceforward( gNormal.xyz,raydir.xyz, gNormal.xyz));

            // 
            if (diffuseColor.w > 0.001f) { // Reflection
                raydir.xyz = (i == 0 && I == 1 || couldReflection) ? 
                    reflectGlossy(seed, raydir.xyz, mat3x3(gTangent.xyz,gNormal.xyz,gmNormal.xyz), specularColor.y) : 
                    randomHemisphereCosine(seed, mat3x3(gTangent.xyz,gmNormal.xyz,gmNormal.xyz));
            } else { // Fully Transparent, Continue...
                raydir.xyz = normalize(raydir.xyz); 
                if (TRANSPARENT_ITERATION > 0) { TRANSPARENT_ITERATION--; i--; };
            };

            // 
            origin.xyz += faceforward(gmNormal.xyz,-raydir.xyz,gmNormal.xyz) * 0.0001f + raydir.xyz * 0.0001f;
            if ((dot(gEnergy.xyz,1.f.xxx)/3.f) <= 0.001f || depth >= 9999.f || dot(raydir.xyz,gmNormal.xyz) <= 0.f) { break; }; // 

            // for fix direct light leaks
            gmNormal.xyz = normalize(faceforward(gmNormal.xyz, -raydir.xyz, gmNormal.xyz));
             gNormal.xyz = normalize(faceforward( gNormal.xyz, -raydir.xyz,  gNormal.xyz));
        } else {
            gSignal.xyz += fma(gEnergy.xyz, 1.f.xxx,gSignal.xyz), gEnergy *= 0.f;
            forign.xyz = 0.f.xxx;
        };

        // 
        if (I == 0) { // Store for Diffuse
            //const vec4 colordSample = imageLoad(writeImages[RESCOLOR], ivec2(lanQ));
            const vec4 directSample = 0.f.xxxx;//imageLoad(writeImages[DIFFUSED], ivec2(lanQ)); // Use Explicit
            const vec4 locateSample = 0.f.xxxx;//imageLoad(writeImages[SAMPLING], ivec2(lanQ));
            imageStore(writeImages[DIFFUSED], ivec2(lanQ), clamp(gSignal,0.f.xxxx,65536.f.xxxx) + directSample);
            imageStore(writeImages[SAMPLING], ivec2(lanQ), vec4(forign,1.f));
            imageStore(writeImages[NORMALED], ivec2(lanQ), vec4(fnorml,1.f));
            //imageStore(writeImages[RESCOLOR], ivec2(lanQ), colourSample + colordSample); // Addict with... 
        };

        if (I == 1) { // Titanic OS
            const vec4 speculSample = 0.f.xxxx;//imageLoad(writeImages[REFLECTS], ivec2(lanQ));
            //imageStore(writeImages[REFLECTS], ivec2(lanQ), vec4(gSignal.xyz, speculSample.y));
            //imageStore(writeImages[REFLECTS], ivec2(lanQ), vec4(mix(speculSample.xyz/max(speculSample.w,1.f),clamp(gSignal,0.f.xxxx,1.f.xxxx).xyz,speculSample.w < 0.9999f ? 1.f : clamp(speculSample.y,0.f,1.f)*0.3333f+0.3333f),frefl));
              imageStore(writeImages[REFLECTS], ivec2(lanQ), vec4(mix(speculSample.xyz/max(speculSample.w,1.f),clamp(gSignal,0.f.xxxx,1.f.xxxx).xyz,speculSample.w < 0.9999f ? 1.f : clamp(speculSample.y,0.f,1.f)*0.3333f+0.3333f),1.f));
        };

        subgroupBarrier();
    };
    */
};
