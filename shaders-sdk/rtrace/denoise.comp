#version 460 core // #
#extension GL_GOOGLE_include_directive          : require
#include "./driver.glsl"

// 
//layout ( location = 0 ) in vec2 vcoord;
//layout ( location = 0 ) out vec4 uFragColor;
layout (local_size_x = 16u, local_size_y = 12u) in; 

// 
vec4 getIndirect(in ivec2 map){
    const ivec2 size = imageSize(writeImages[DIFFUSED]);
    //vec4 samples = imageLoad(writeImages[DIFFUSED],ivec2(map.x,size.y-map.y-1)); samples = max(samples, 0.001f); samples.xyz /= samples.w;
    //return samples;
    return imageLoad(writeImages[DIFFUSED],ivec2(map.x,size.y-map.y-1));
    //return texelFetch(frameBuffers[RAYQUERY],ivec2(map),0);
};

vec4 getReflection(in ivec2 map){
    const ivec2 size = imageSize(writeImages[REFLECTS]);
    return imageLoad(writeImages[REFLECTS],ivec2(map.x,size.y-map.y-1));
};

vec4 getNormal(in ivec2 coord){
    vec4 normals = vec4(texelFetch(frameBuffers[NORMALED],ivec2(coord),0).xyz, 0.f);
    return normals;
};

vec4 getPosition(in ivec2 coord){
    vec4 position = vec4(texelFetch(frameBuffers[POSITION],ivec2(coord),0).xyz, 0.f);
    return position;
};

vec4 getColor(in ivec2 map){
    const ivec2 size = imageSize(writeImages[RESCOLOR]);
    return imageLoad(writeImages[RESCOLOR],ivec2(map.x,size.y-map.y-1));
};

void setColor(in ivec2 map, in vec4 color){
    const ivec2 size = imageSize(writeImages[RESCOLOR]);
    imageStore(writeImages[RESCOLOR],ivec2(map.x,size.y-map.y-1),color);
}

// bubble sort horror
void sort(inout vec3 arr[9u], int d)
{
    vec3 temp;
    for(int i=0;i<d*d-1;++i)
    {
        for(int j=i+1;j<d*d;++j)
        {
            // my super multicomponent branchless arithmetic swap
            // based on: a <- a+b, b <- a - b, a <- a - b
            vec3 g = vec3(greaterThan(arr[i],arr[j]));
            arr[i] += arr[j];
            arr[j] = g*arr[i] - (2.0*g-vec3(1.0))*arr[j];
            arr[i] -= arr[j];
        }
    }
}

vec4 getDenoised(in ivec2 coord, in bool reflection, in uint maxc) {
    vec4 centerNormal = getNormal(coord);
    vec3 centerOrigin = world2screen(getPosition(coord).xyz);
    
    /*
    vec3 samples[9u]; int scount = 0;
    for (uint x=0;x<3u;x++) {
        for (uint y=0;y<3u;y++) {
            vec4 csample = getIndirect(swapc+ivec2(x-1u,y-1u));
            vec4 nsample = getNormal(coord+ivec2(x-1u,y-1u));

            if (dot(nsample.xyz,centerNormal.xyz) > 0.5f || (x == 4u && y == 4u)) {
                //sampleBlur += vec4(csample.xyz,1.f);
                samples[scount++].xyz = csample.xyz;
            };
        };
    };

    if (scount > 0) sort(samples,int(sqrt(float(scount))));
    return vec4(samples[scount>>1u],1.f);
    */

    vec4 sampled = 0.f.xxxx; int scount = 0;
    vec4 centerc = getIndirect(coord);
    for (uint x=0;x<maxc;x++) {
        for (uint y=0;y<maxc;y++) {
            ivec2 map = coord+ivec2(x-(maxc>>1),y-(maxc>>1));
            vec4 nsample = getNormal(map);
            vec3 psample = world2screen(getPosition(map).xyz);

            if (dot(nsample.xyz,centerNormal.xyz) >= 0.5f && distance(psample.xyz,centerOrigin.xyz) < 0.01f && abs(centerOrigin.z-psample.z) < 0.005f || (x == (maxc>>1) && y == (maxc>>1)) || centerc.w <= 0.0001f) {
                vec4 samp = 0.f.xxxx;
                if (reflection) {
                    samp = vec4(getReflection(map).xyz,1.f);
                } else {
                    samp = getIndirect(map);
                };

                sampled += samp;
                //sampled += clamp(samp/max(samp.w,1.f),0.f.xxxx,1.f.xxxx);
            };
        };
    };

    if (reflection) {
        sampled.xyz /= sampled.w;
        sampled.w = getReflection(coord).w;
    };

    return sampled;
};

// 
void main() { // TODO: explicit sampling 
    const ivec2 size = imageSize(writeImages[DIFFUSED]), samplep = ivec2(gl_GlobalInvocationID.xy);//ivec2(gl_FragCoord.x,float(size.y)-gl_FragCoord.y);
    const vec4 emission = texelFetch(frameBuffers[EMISSION],samplep,0);
    const vec4 specular = texelFetch(frameBuffers[SPECULAR],samplep,0);
    const vec4 diffused = texelFetch(frameBuffers[COLORING],samplep,0);

    // 
    const vec4 colourSample = texelFetch(frameBuffers[COLORING],samplep,0);
    const vec4 normalSample = texelFetch(frameBuffers[NORMALED],samplep,0);
    const vec4 worldsSample = texelFetch(frameBuffers[SAMPLEPT],samplep,0);
    const vec4 emitedSample = texelFetch(frameBuffers[EMISSION],samplep,0);
    const vec4 speculSample = texelFetch(frameBuffers[SPECULAR],samplep,0);
    const vec4 geompsSample = texelFetch(frameBuffers[POSITION],samplep,0);
    const vec3 cameraSample = vec4(worldsSample.xyz,1.f)*modelview;

    // 
    vec3 raydir = (modelview * normalize(cameraSample.xyz)).xyz;
    vec3 origin = worldsSample.xyz;
    vec3 normal = normalSample.xyz;
    vec3 geonrm = texelFetch(frameBuffers[GEONORML],samplep,0).xyz;

    // 
    int denDepth = 3;
    if (specular.y > 0.3333f) denDepth = 5;
    if (specular.y > 0.6666f) denDepth = 7;
    if (specular.y > 0.9999f) denDepth = 9;

    // 
    vec4 coloring = getDenoised(samplep,false, 9);
    vec4 reflects = getDenoised(samplep, true, denDepth);
    if (reflects.w <= 0.f) { reflects = vec4(0.f.xxx,0.f); };
    if (coloring.w <= 0.f) { coloring = vec4(0.f.xxx,1.f); };
    coloring = max(coloring, 0.f.xxxx);
    reflects = max(reflects, 0.f.xxxx);

    // 
    vec4 resampled = getColor(samplep);
    vec4 newdpixel = vec4((diffused.xyz/diffused.w)*(coloring.xyz/coloring.w),1.f);

    // 
    const float inIOR = 1.f, outIOR = 1.6666f;
    const float frefl = mix(clamp(pow(1.0f + dot(raydir.xyz, normal.xyz), outIOR/inIOR), 0.f, 1.f) * 0.3333f, 1.f,speculSample.z);

    // 
    vec4 nwsampled = newdpixel;//resampled+clamp(newdpixel,0.f.xxxx,1.f.xxxx);
    setColor(samplep,nwsampled);

    // Final Result Rendering
    //imageStore(writeImages[RENDERED],samplep,clamp(vec4(mix(nwsampled.xyz/max(nwsampled.w,1.f),reflects.xyz,reflects.w)+max(emission.xyz,0.f.xxx),1.f),0.f.xxxx,1.f.xxxx));
      imageStore(writeImages[RENDERED],samplep,vec4(mix(vec3(coloring.xyz/max(coloring.w,1.f)*diffused.xyz)+max(emission.xyz,0.f.xxx),reflects.xyz/max(reflects.w,1.f),frefl),1.f));
};
