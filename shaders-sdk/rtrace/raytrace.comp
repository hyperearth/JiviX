#version 460 core // #
#extension GL_GOOGLE_include_directive : require
//#extension GL_EXT_ray_tracing          : require
#extension GL_EXT_ray_query            : require
//#extension GL_ARB_post_depth_coverage  : require
#include "./driver.glsl"
#include "./global.glsl"

// 
#define RAY_TRACE
#define FAST_BW_TRANSPARENT false
//#define FAST_BW_TRANSPARENT // Can be denoised, but with WRONG results!
//#define TOP_LAYERED // Has reflection problems

// TODO: X-Based Optimization
const uint workX = 64u, workY = 12u; // Optimal Work Size for RTX 2070
layout ( local_size_x = workX, local_size_y = workY ) in; 
layout ( binding = 2, set = 1 ) uniform accelerationStructureEXT Scene;

// 
shared XHIT hits[workX*workY];

// 
XHIT traceRays(in vec3 origin, in vec3 raydir, in vec3 normal, float maxT, bool scatterTransparency, float threshold) {
    XPOL material; uint32_t I = 0, R = 0; float lastMax = maxT, lastMin = 0.001f; vec3 lastOrigin = origin + faceforward(-normal.xyz, raydir.xyz, normal.xyz) * lastMin + faceforward(raydir.xyz, raydir.xyz, normal.xyz) * lastMin;
    const vec4 skyColor = gSkyShader(raydir.xyz, origin.xyz);//vec4(texture(background, flip(lcts(raydir.xyz))).xyz, 1.f);
    material. diffuseColor = vec4(0.f.xxx, 0.f);
    material.emissionColor = vec4(skyColor.xyz,0.f.x);
    material. normalsColor = vec4(0.5f,0.5f,1.f,1.f);
    material.specularColor = vec4(0.f.xxx,0.f.x); // TODO: Correct Specular Initial
    material.mapNormal = vec4(vec3(0.f,1.f,0.f),1.f);
    material.txcmid = vec4(uintBitsToFloat(packUnorm2x16(0.f.xx)), 0.f, 0.f, 0.f); // 
    //material.gObject = mat4x4(vec4(1.f,0.f,0.f,0.f), vec4(0.f,1.f,0.f,0.f), vec4(0.f,0.f,1.f,0.f), vec4(0.f,0.f,0.f,1.f));
    //material.tangent = vec4(vec3(0.f,0.f,1.f),lastMin); // UNUSED

    float fullLength = 0.f;
    vec3 sorigin = lastOrigin;
    vec3 forigin = lastOrigin; // REQUIRED!
    bool restart = false;

    // 
    XHIT processing, confirmed;
    processing.origin.xyz = origin.xyz;
    processing.direct.xyz = raydir.xyz;
    processing.gIndices = uvec4(0u);
    processing.gBarycentric = vec4(0.f.xxx, lastMax);
    confirmed = processing;

    // 
    XGEO geometry;
    geometry.gNormal = vec4(vec3(0.f,1.f,0.f),0.f);

    // 
    while((R++) < 16) { // restart needs for transparency (after every resolve)
        rayQueryEXT rayQuery;
        rayQueryInitializeEXT(rayQuery, Scene, gl_RayFlagsOpaqueEXT|gl_RayFlagsCullNoOpaqueEXT|gl_RayFlagsCullBackFacingTrianglesEXT,
            0xFF, (forigin = fullLength * raydir + sorigin) + faceforward(geometry.gNormal.xyz,raydir.xyz,-geometry.gNormal.xyz) * 0.001f + raydir.xyz * 0.001f, lastMin, raydir, lastMax = (maxT - fullLength));

        while((I++) < 64) {
            bool complete = !rayQueryProceedEXT(rayQuery);

            // Full Instance ID of Node (BY GEOMETRY INSTATNCE!!)
            uint primitiveID = -1, nodeMeshID = -1, geometryInstanceID = -1, globalInstanceID = -1;
            vec2 baryCoord = vec2(0.f,0.f);
            float tHit = lastMax;
            vec3 origin = forigin;
            //mat4x3 worldToObject;

            // 
            if (complete) {
                nodeMeshID = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true); // Mesh ID from Node Mesh List (because indexing)
                geometryInstanceID = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, true); // TODO: Using In Ray Tracing (and Query) shaders!
                globalInstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, true);
                baryCoord = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
                primitiveID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true); 
                origin = rayQueryGetIntersectionObjectRayOriginEXT(rayQuery, true);
                tHit = rayQueryGetIntersectionTEXT(rayQuery, true);
                //worldToObject = rayQueryGetIntersectionWorldToObjectEXT(rayQuery, true);
            } else {
                nodeMeshID = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false); // Mesh ID from Node Mesh List (because indexing)
                geometryInstanceID = rayQueryGetIntersectionGeometryIndexEXT(rayQuery, false); // TODO: Using In Ray Tracing (and Query) shaders!
                globalInstanceID = rayQueryGetIntersectionInstanceIdEXT(rayQuery, false);
                baryCoord = rayQueryGetIntersectionBarycentricsEXT(rayQuery, false);
                primitiveID = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false); 
                origin = rayQueryGetIntersectionObjectRayOriginEXT(rayQuery, false);
                tHit = rayQueryGetIntersectionTEXT(rayQuery, false);
                //worldToObject = rayQueryGetIntersectionWorldToObjectEXT(rayQuery, false);
            };

            // 
            if (tHit < lastMax) { lastOrigin = raydir*tHit + forigin, lastMax = tHit; // Choice Only MINIMAL
                const int IdxType = int(meshInfo[nodeMeshID].indexType)-1;

                // Interpolate In Ray-Tracing
                processing.gIndices = uvec4(globalInstanceID, geometryInstanceID, primitiveID, 0u);
                processing.gBarycentric.xyz = vec3(1.f-baryCoord.x-baryCoord.y,baryCoord);
                processing.gBarycentric.w = fullLength + lastMax;
                processing.direct = vec4(raydir.xyz, 0.f);
                processing.origin = vec4(lastOrigin, 1.f);

                // 
                if (!complete) { // WARNING: 
                    geometry = interpolate(processing);
                    material = materialize(processing, geometry);
                };

                // 
                if (material.diffuseColor.w > (scatterTransparency ? random(seed) : threshold) || complete) { // Only When Opaque!
                    if (!complete) { rayQueryConfirmIntersectionEXT(rayQuery); };
                    confirmed = processing;
                } else 
                if ((fullLength + lastMax) <= (maxT-0.1f)) { // It's transparent, need ray-trace again! (but with another position)
                    if (complete) { restart = true; };
                }
            };

            if (complete) { break; };
        };
        
        // 
        //rayQueryConfirmIntersectionEXT(rayQuery);
        rayQueryTerminateEXT(rayQuery);

        // 
        if (!restart || (fullLength += lastMax) >= (maxT-0.1f)) { break; } else { restart = false; }; // With Correction* 
    };

    // 
    //if (processing.txcmid.z <= 0u) {
        //confirmed.origin.xyz = sorigin + fullLength * raydir;
    //};

    // 
    return confirmed;///(fullLength >= (maxT-1.f)) ? result : processing;
};

#define LAUNCH_ID gl_GlobalInvocationID.xy
#include "./stuff.glsl"
#include "./raytrace-adv-new.glsl"
